#!/usr/bin/python3

from xml.etree.ElementTree import ElementTree
from thefoxUtils import unikey
import os.path
import argparse


def main():
    parser = argparse.ArgumentParser(description='Extract text from FTML files')
    parser.add_argument('file', help='FTML files to process', nargs='+')
    parser.add_argument('--version', action='version', version='%(prog)s ' + '0.1')
    args = parser.parse_args()

    for ftml_filename in args.file:
        # Parse FTML data
        ftml_data = FTML()
        ftml_data.parse(ftml_filename)

        # Construct output filename
        (base_filename, ext) = os.path.splitext(ftml_filename)

        # Write plain text file
        text_filename = f'../dev/{base_filename}.txt'
        with open(text_filename, 'w') as text_file:
            text = ftml_data.text()
            text_file.write(text)

        # Write HTML file
        html_filename = f'../web/{base_filename}.html'
        with open(html_filename, 'w') as html_file:
            html = ftml_data.html()
            html_file.write(html)


class FTML:
    """Test data in an FTML file"""

    def __init__(self):
        self.testgroups = list()
        self.testgroup = None

    def parse(self, ftml_filename):
        """Parse FTML file"""

        # Read FTML file
        ftml = ElementTree()
        ftml.parse(ftml_filename)

        # Extract text from FTML file
        for testgroup in ftml.iter('testgroup'):
            tests = self.add_testgroup(testgroup.get('label'))
            for test in testgroup.iter('test'):
                label = test.get('label')
                comment = test.findtext('comment', '')
                data = test.find('string').text
                tests.add_test(label, comment, data)

    def add_testgroup(self, data):
        """Add a TestGroup with data"""
        testgroup = TestGroup(data)
        self.testgroups.append(testgroup)
        return testgroup

    def text(self):
        """Format data for a plain text file"""
        text = ''
        for testgroup in self.testgroups:
            text += testgroup.text()
        return text

    def html(self):
        """Format data for a plain text file"""
        html = """<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="dev.css" type="text/css">
<meta charset="utf-8">
</head>
<body>
"""
        for testgroup in self.testgroups:
            html += testgroup.html()
        html += """</body>
</html>
"""
        return html


class TestGroup:
    """Test group in an FTML file"""

    def __init__(self, label):
        self.data = label
        self.tests = list()

    def add_test(self, label, comment, data):
        """Add test"""
        test = Test(label, comment, data)
        self.tests.append(test)
        return test

    def text(self):
        """Format data for a plain text file"""
        text = '# ' + self.data + '\n'
        for test in self.tests:
            text += test.text()
        for char in r'\#$':  # \#$%&()^_~
            text = text.replace(char, '\\' + char)
        return text

    def html(self):
        """Format data for a HTML file"""
        html = '<h1>' + self.data + '</h1>\n'
        for test in self.tests:
            html += test.html()
        return html


class Test:
    """Test in an FTML file"""

    def __init__(self, label, comment, data):
        self.label = label
        self.comment = comment
        self.data = unikey.modify(data)

    def text(self):
        """Format data for a plain text file"""
        return(self.label + ': ' + self.comment + ' ' + self.data + '\n')

    def html(self):
        """Format data for a HTML file"""
        label = f'<p>{self.label}: {self.comment}</p>\n'
        local = f'<p>{self.data}</p>\n'
        woff2 = f'<p class=dev>{self.data}</p>\n'
        return label + local + woff2


if __name__ == "__main__":
    main()
