#!/usr/bin/python3

from xml.etree.ElementTree import ElementTree
from thefoxUtils import unikey
import os.path
import argparse


def main():
    parser = argparse.ArgumentParser(description='Extract text from FTML files')
    parser.add_argument('file', help='FTML files to process', nargs='+')
    parser.add_argument('--version', action='version', version='%(prog)s ' + '0.1')
    args = parser.parse_args()

    for ftml_filename in args.file:
        # Parse FTML data
        ftml_data = FTML()
        ftml_data.parse(ftml_filename)

        # Construct output filename
        (base_filename, ext) = os.path.splitext(ftml_filename)

        # Write plain text file
        text_filename = f'generated/{base_filename}-ftml.txt'
        with open(text_filename, 'w') as text_file:
            text = ftml_data.text()
            text_file.write(text)


class FTML:
    """Test data in an FTML file"""

    def __init__(self):
        self.testgroups = list()
        self.testgroup = None

    def parse(self, ftml_filename):
        """Parse FTML file"""

        # Read FTML file
        ftml = ElementTree()
        ftml.parse(ftml_filename)

        # Extract text from FTML file
        for testgroup in ftml.iter('testgroup'):
            testgroup_data = self.add_testgroup(testgroup.get('label'))
            for test in testgroup.iter('test'):
                test_data = testgroup_data.add_test(test.get('label'))
                for literal_string in test.iter('string'):
                    test_data.add_data(literal_string.text)

    def add_testgroup(self, data):
        """Add a TestGroup with data"""
        testgroup = TestGroup(data)
        self.testgroups.append(testgroup)
        return testgroup

    def text(self):
        """Format data for a plain text file"""
        text = ''
        for testgroup in self.testgroups:
            text += testgroup.text()
        return text


class TestGroup:
    """Test group in an FTML file"""

    def __init__(self, label):
        self.data = label
        self.tests = list()

    def add_test(self, label):
        """Add test"""
        test = Test(label)
        self.tests.append(test)
        return test

    def text(self):
        """Format data for a plain text file"""
        text = '\# ' + self.data + '\n'
        for test in self.tests:
            text += test.text()
        return text


class Test:
    """Test in an FTML file"""

    def __init__(self, label):
        self.label = label
        self.data = ''

    def add_data(self, data):
        """Add data"""
        self.data += unikey.modify(data)

    def text(self):
        """Format data for a plain text file"""
        return(self.label + ' ' + self.data + '\n')


if __name__ == "__main__":
    main()
