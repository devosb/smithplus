#!/bin/bash

export SILE_PATH=/mnt/builds/fontproof
if [ -f .smithrc ]
then
    source .smithrc
fi

if [ ! -f wscript ]
then
    echo "Must be in the root of the project"
    exit 1
fi

if [ $HOSTNAME = fossa ]
then
    if [ -f wscript ]
    then
        prj=$(basename $PWD)
        rrun=../rrun-$prj
        if [ ! -x $rrun ]
        then
            echo "You are in $PWD which is not on the ramdisk, exiting..."
            exit 1
        fi
    fi
fi

if [ "$1" == "bisect" ]
then
    prj="$2"
    if [ -d "$prj" ]
    then
        pushd $prj
        smith distclean
        smith configure
        smith build
        if [ ! -f results/*-Regular.ttf ]
        then
            echo "broken build"
            exit 1
        fi
        echo "successful build"
        exit 0
        popd
    fi
fi

if [ "$1" == "ots" ]
then
    for output in *_*
    do
        flavor=$(echo $output | cut -d _ -f 2)
        for font in $output/*.$flavor
        do
            namestyle=${font%.$flavor}
            ots-sanitize $font > /dev/null 2> ${namestyle}-ots.log
        done
        ls -l -S $output/*-ots.log

        if [ -d results ]
        then
            $HOME/.local/bin/smith ots
        fi
    done
    exit 0
fi

if [ "$1" == "validate" ]
then
    for output in *_*
    do
        flavor=$(echo $output | cut -d _ -f 2)
        for font in $output/*.$flavor
        do
            namestyle=${font%.$flavor}
            fontval $font &
        done
        wait

        if [ -d results ]
        then
            $HOME/.local/bin/smith validate
        fi
    done
    exit 0
fi

if [ "$1" == "fontbakery" ]
then
    for output in *_*
    do
        flavor=$(echo $output | cut -d _ -f 2)
        psfrunfbchecks --html $output/fbchecks.html --log $output/runfbchecks.log $output/*.$flavor
    done
    exit 0
fi

if [ "$1" == "make" ]
then
    if [ -d source/masters ]
    then
        for dspace in source/*Design.designspace
        do
            if [ -f $dspace ]
            then
                echo "building instance fonts from $dspace"
                fontmake -m $dspace --keep-overlaps -i -o otf ttf
                familypath=${dspace%Design.designspace}

                echo "building variable font from $dspace"
                familyname=${familypath#source/}
                vardir=variable_ttf
                mkdir $vardir
                fontpath=${vardir}/${familyname}-VF.ttf
                fontmake -m $dspace --output-path $fontpath -o variable
            fi
        done
    else
        for dspace in source/*.designspace
        do
            if [ -f $dspace ]
            then
                echo "building static fonts from $dspace"
                fontmake -m $dspace -o otf ttf
            fi
        done
    fi

    exit 0
fi

if [ "$1" == "install" ]
then
    /bin/cp -p -v results/*.ttf ~/.fonts
    /bin/cp -p -v results/*.ttf ~/guest
    for makedir in *_*
    do
        mkdir ~/guest/$makedir
        cp -p -v $makedir/*.?tf ~/guest/$makedir
    done

    for www in web woff
    do
        if [ -d results/$www ]
        then
            cp -p -v results/$www/*.woff* web
        fi
    done

    exit 0
fi

if [ "$1" == "windows" ]
then
    prj=$(basename $PWD)
    web=$HOME/guest/$prj-web
    rm -rf $web
    mkdir $web
    cp -a -v web/* $web

    pushd tests

    # windows apps
    /bin/cp -p -v *.indd *.docx ~/guest

    # InDesign
    folder="$HOME/guest/Document Fonts"
    rm -rf "$folder"
    mkdir "$folder"
    cp -p -v ../results/*.ttf "$folder"

    # plain text
    if [ -d generated ]
    then
        pushd generated
        for txt_file in *.txt ../*.txt ../../dev/*.txt
        do
            if [ -f $txt_file ]
            then
                txt=$(basename $txt_file)
                unix2dos -n $txt_file ~/guest/$txt
            fi
        done
        popd
    fi

    # ftml
    psfcheckftml
    for ftml in *.ftml
    do
        # check for valid files
        xmllint --noout --dtdvalid $HOME/builds/ftml/FTML.dtd $ftml
        if [ $? -gt 0 ]
        then
            echo "ftml file $ftml is invalid"
        fi

        # produce document
        ftml2odt ${ftml%.ftml}
    done
    popd

    exit 0
fi

if [ "$1" == "apple" ]
then
    chmod -R go+Xr web
    rsync -v -a --delete web/ nrsi.sil.org:/var/www/fonts/

    exit 0
fi

if [ "$1" == "data" ]
then
    for auto in tools/auto-*
    do
        ./$auto tests/$(basename $auto .py).txt
    done

    if [ -f tools/genftmlfiles.sh ]
    then
        ./tools/genftmlfiles.sh
    fi

    pushd tests
    /bin/rm -rf generated
    mkdir generated
    for htxt in *.htxt
    do
        if [ -f $htxt ]
        then
            unikey -o generated/${htxt%.htxt}-plain.txt $htxt
        fi
    done

    for ftml in *.ftml
    do
        if [ -f $ftml ]
        then
            ftml2txt $ftml
            cp ../dev/${ftml%.ftml}.txt generated/${ftml%.ftml}.htxt
        fi
    done

    if [ -f ../source/master.gdl ]
    then
        pushd generated
        for txt_file in *.txt ../*.txt ../../dev/*.txt
        do
            txt=$(basename $txt_file)
            for nf in nfc nfd
            do
                txtconv -i $txt_file -o ${txt%.txt}-$nf.txt -$nf -nobom
            done
        done
        popd
    fi

    popd

    exit 0
fi

if [ "$1" == "reference" ]
then
    pushd dev
    cp -p *.ttf old
    for ttf in *.ttf
    do
        cp -p ~/guest/$ttf .
    done
    ls -l *.ttf
    popd

    exit 0
fi

if [ "$1" == "wordlists" ]
then
    cd tests
    if [ -f wiki.txt ]
    then
        mv wiki.txt wiki.text
        mv dict.txt dict.text
        echo "large wordlists disabled"
    else
        mv wiki.text wiki.txt
        mv dict.text dict.txt
        echo "large wordlists enabled"
    fi
    cd ..

    exit 0
fi

if [ "$1" == "update" ]
then
    gdcsv

    if [ -d documentation ]
    then
        pushd documentation
        for odt in *.odt
        do
            pdf=$(basename $odt .odt).pdf
            if [ $odt -nt $pdf ]
            then
                soffice --convert-to pdf $odt
            fi
        done
        popd
    fi

    for ufo in source/*.ufo source/masters/*.ufo
    do
        if [ -d $ufo ]
        then
            if [ OFL.txt -nt $ufo/fontinfo.plist ]
            then
                psfsetkeys -k "copyright" --filepart OFL.txt $ufo
                psfsetkeys -k "openTypeNameLicense" --file OFL.txt $ufo
            fi
        fi
    done

    /bin/rm -rf {source,tests}/{'',masters}/{backups,logs}

    exit 0
fi

$HOME/.local/bin/smith "$@" $FLOWARGS
