#!/bin/bash

mode="$1"

# export SILE_PATH=/mnt/builds/fontproof
guest=$HOME/guest
locl=${PWD/ci\//}-local
ref=$locl/references
dev=$locl/dev
rc=$dev/smithrc
ht=$dev/dev.css
bv=$dev/bumpversion.cfg
wl=$guest/wordlist.txt

if [ ! -d $ref ]
then
    echo "Dev directory $ref does not exist"
fi

if [ -f $rc ]
then
    source $rc
else
    echo "Dev file $rc does not exist"
fi

if [ ! -f $ht ]
then
    echo "Dev file $ht does not exist"
fi

if [ ! -f $bv ]
then
    echo "Dev file $bv does not exist"
fi

if [ ! -f $wl ]
then
    echo "Dev file $wl does not exist"
fi

prj=$(basename $PWD)

if [ ! -f wscript ]
then
    echo "Must be in the root of the project"
    exit 1
fi

if [ $HOSTNAME = apple ]
then
    if [ -f wscript ]
    then
        rrun=../rrun-$prj
        if [ ! -x $rrun ]
        then
            echo "You are in $PWD which is not on the ramdisk, exiting..."
            exit 1
        fi
    fi
fi

if [ "$mode" == "bisect" ]
then
    repo="$2"
    if [ -d "$repo" ]
    then
        pushd $repo
        smith distclean
        smith configure
        smith build
        if [ ! -f results/*-Regular.ttf ]
        then
            echo "broken build"
            exit 1
        fi
        echo "successful build"
        exit 0
        popd
    fi
fi

if [ "$mode" == "diff" ]
then
    pushd results
    for ttf in *.ttf
    do
        diffenator2 diff -fb ../references/$ttf -fa $ttf --user-wordlist $wl -o $guest
    done
    popd
    exit 0
fi

if [ "$mode" == "ots" ]
then
    for output in *_?tf
    do
        if [ ! -d $output ]
        then
            continue
        fi
        flavor=$(echo $output | cut -d _ -f 2)
        for font in $output/*.$flavor
        do
            namestyle=${font%.$flavor}
            ots-sanitize $font > /dev/null 2> ${namestyle}-ots.log
        done
        ls -l -S $output/*-ots.log
    done
    if [ -d results ]
    then
        $HOME/.local/bin/smith ots
    fi
    exit 0
fi

if [ "$mode" == "validate" ]
then
    for output in *_?tf
    do
        if [ ! -d $output ]
        then
            continue
        fi
        flavor=$(echo $output | cut -d _ -f 2)
        for font in $output/*.$flavor
        do
            namestyle=${font%.$flavor}
            fontval $font &
        done
        wait
    done
    if [ -d results ]
    then
        $HOME/.local/bin/smith validate
    fi
    exit 0
fi

if [ "$mode" == "zip" ]
then
    for output in *_?tf
    do
        if [ ! -d $output ]
        then
            continue
        fi
        flavor=$(echo $output | cut -d _ -f 2)
        for font in $output/*.$flavor
        do
            pathnamestyle=${font%.$flavor}
            namestyle=${pathnamestyle#$output/}
            download=$(echo $namestyle | cut -d \- -f 1)
            mkdir $download
            cp $font $download
        done
        for txt in *.txt
        do
            unix2dos -n $txt $download/$txt
            chmod 644 $download/$txt
        done
        zip -r $download $download
    done
    if [ -d results ]
    then
        $HOME/.local/bin/smith zip
    fi
    exit 0
fi

if [ "$mode" == "fontbakery" ]
then
    for output in *_?tf
    do
        if [ ! -d $output ]
        then
            continue
        fi
        flavor=$(echo $output | cut -d _ -f 2)
        fontbakery check-profile silfont.fbtests.profile $output/*.$flavor --html $output/fbchecks.html -F --succinct -S
    done
    exit 0
fi

if [ "$mode" == "make" ]
then
    if [ -d source/masters ]
    then
        for dspace in source/*-VF.designspace
        do
            if [ -f $dspace ]
            then
                if [ "$2" == "otf" -o -z "$2" ]
                then
                    echo "building otf instance fonts from $dspace"
                    fontmake -m $dspace --keep-overlaps --check-compatibility -i -o otf
                fi
                if [ "$2" == "ttf" -o -z "$2" ]
                then
                    echo "building ttf instance fonts from $dspace"
                    fontmake -m $dspace --keep-overlaps --check-compatibility -i -o ttf
                fi
                if [ "$2" == "variable" -o -z "$2" ]
                then
                    echo "building variable font from $dspace"

                    echo "smith flow (sf)"
                    designpath=${dspace%-VF.designspace}
                    designfile=${designpath#source/}
                    outfile=${designfile}.ttf
                    fontmake -m $dspace --output-path $outfile -o variable # --feature-writer None
                    familyname=$(otfinfo -a $outfile)
                    vardir=sf
                    varbase=${vardir}/${designfile}-SF
                    varttf=${varbase}.ttf
                    varweb=${varbase}.woff2
                    mkdir -p $vardir
                    for ttf in *.ttf
                    do
                        familyname=$(otfinfo -a $ttf)
                        ttfname -n "${familyname} SF" $ttf $varttf
                        gftools gen-stat --inplace --src source/stat.yaml $varttf
                        psfwoffit -m source/*-WOFF-metadata.xml --woff2 $varweb $varttf
                        rm $ttf
                    done
                fi
            fi
        done

        if [ "$2" == "variable" -o -z "$2" ]
        then
            if [ -f googlefonts.yaml ]
            then
                echo "Google Fonts (gf)"
                gftools builder googlefonts.yaml
                pushd gf/variable
                for ttf in *.ttf
                do
                    familyname=$(otfinfo -a $ttf)
                    gftools fix-family --inplace --rename-family "${familyname} GF" $ttf
                done
                popd
            fi

            if [ -f tirobuild.yaml ]
            then
                echo "Tiro Build (tb)"
                python3 $HOME/builds/tirotools/Builder/tirobuild.py tirobuild.yaml
            fi
        fi

        for output in instance_*
        do
            if [ -d $output ]
            then
                fixttf $output/*.?tf
            fi
        done
    else
        for dspace in source/*.designspace
        do
            if [ -f $dspace ]
            then
                echo "building otf and ttf static fonts from $dspace"
                fontmake -m $dspace --check-compatibility -o otf ttf
            fi
        done
    fi

    exit 0
fi

if [ "$mode" == "install" -o "$mode" == "windows" -o "$mode" == "apple" ]
then
    # smith
    for dir in $guest/xtf /mnt/fonts $guest
    do
        cp -v results/*.ttf $dir
    done

    # fontmake static
    for output in *_?tf
    do
        if [ ! -d $output ]
        then
            continue
        fi
        mkdir $guest/$output
        cp -v $output/*.?tf $guest/$output
    done

    # fontmake variable
    if [ -d sf ]
    then
        cp -v sf/*.ttf /mnt/fonts
        cp -v sf/*.ttf $guest
    fi
    if [ -d gf ]
    then
        pushd gf/variable
        for ttf in *.ttf
        do
            cp -v -p $ttf /mnt/fonts/${ttf/\[wght\]/-GF}
            cp -v -p $ttf $guest
        done
        popd
    fi
    if [ -d output ]
    then
        cp -v output/tirobuild/*/TTFVF/*.ttf /mnt/fonts
        cp -v output/tirobuild/*/TTFVF/*.ttf $guest
    fi

    for www in web woff
    do
        if [ -d results/$www ]
        then
            cp -v results/$www/*.woff2 $guest/web
        fi
    done

    # ftml
    if [ "$mode" != "apple" ]
    then
        # FTML files
        pushd tests
        psfcheckftml
        for ftml in *.ftml
        do
            # check for valid files
            xmllint --noout --dtdvalid $HOME/builds/ftml/FTML.dtd $ftml
            if [ $? -gt 0 ]
            then
                echo "ftml file $ftml is invalid"
            fi

            # produce document
            ftml2odt ${ftml%.ftml}
        done
        popd

        # TypeTuner files
        if [ -d source/typetuner ]
        then
            pushd source/typetuner
            for tag in all set
            do
                dtd=feat_${tag}.dtd
                for xml in feat_${tag}*.xml
                do
                    echo xmllint --noout --dtdvalid $dtd $xml
                    xmllint --noout --dtdvalid $dtd $xml
                    if [ $? -gt 0 ]
                    then
                        echo "TypeTuner XML file $xml is invalid"
                    fi
                done
            done
            popd
        fi

        # Documentation
        rsync -v -a --delete documentation $guest
    fi

    if [ "$mode" == "install" ]
    then
        exit 0
    fi
fi

if [ "$mode" == "windows" ]
then
    host=${PWD/ci//}
    pushd tests

    # InDesign
    folder="$HOME/guest/Document Fonts"
    rm -rf "$folder"
    mkdir "$folder"
    cp -v $ref/*.ttf "$folder"
    cp -v $host/references/Noto*.ttf "$folder"
    cp -v ../results/*.ttf "$folder"

    # to install in Windows
    cp -v ../results/*.ttf $guest

    # plain text
    if [ -d generated ]
    then
        for txt_file in *.txt generated/*.txt
        do
            if [ -f $txt_file ]
            then
                txt=$(basename $txt_file)
                unix2dos -n $txt_file $guest/$txt
            fi
        done
    fi

    popd

    exit 0
fi

if [ "$mode" == "apple" ]
then
    ssh-add -l
    if [ $? -gt 0 ]
    then
        ssh-add ~/.ssh/id_ed25519_home
    fi
    chmod -R go+Xr $guest/web
    rsync -v -a --delete $guest/web/ nrsi.sil.org:/var/www/fonts/

    exit 0
fi

if [ "$mode" == "data" ]
then
    rm -f $guest/*.*
    rm -rf $guest/{xtf,txt,web,sfm}
    mkdir -p $guest/{xtf,txt,web,sfm}

    if [ -x makeftml ]
    then
        ./makeftml
    fi

    # web apps
    ln -v -f web/*.html web/*.css tools/*.html $ht $guest/web

    pushd tests

    # windows apps
    ln -v -f *.indd *.odt *.docx $guest

    /bin/rm -rf generated
    mkdir generated
    for htxt in *.htxt
    do
        if [ -f $htxt ]
        then
            unikey -o generated/${htxt%.htxt}-plain.txt $htxt
        fi
    done

    ftml2txt -o $guest -s $HOME/script/SP1 *.ftml
    for ftml in *.ftml
    do
        if [ -f $ftml ]
        then
            cp $guest/txt/${ftml%.ftml}.txt generated/${ftml%.ftml}.htxt
        fi
    done

    cp /dev/null $wl

    for txt_file in *.txt generated/*.txt
    do
        if [ -f $txt_file ]
        then
            cat $txt_file | sed 's/ /\n/g' | sed 's/,//g' >> $wl
        fi
    done

    for txt_file in $guest/txt/*.txt
    do
        if [ -f $txt_file ]
        then
            cat $txt_file | sed 's/,//g' >> $wl
        fi
    done
    unix2dos $guest/txt/*.txt

    popd

    exit 0
fi

if [ "$mode" == "reference" ]
then
    pushd results
    for ttf in *.ttf
    do
        cp -p -v $ref/$ttf $ref/old
        cp -p -v $ttf $ref
    done
    popd

    if [ -d results/tests/ftml/fonts ]
    then
        pushd results/tests/ftml/fonts
        for ttf in *.ttf
        do
            cp -p -v $ref/$ttf $ref/old
            cp -p -v $ttf $ref
        done
        popd
    fi

    pushd $ref
    ls -l -t *.ttf
    popd

    exit 0
fi

if [ "$mode" == "update" ]
then
    gdcsv

    for ufo in source/*.ufo source/masters/*.ufo
    do
        if [ -d $ufo ]
        then
            if [ OFL.txt -nt $ufo/fontinfo.plist ]
            then
                psfsetkeys -k "copyright" --filepart OFL.txt $ufo
                psfsetkeys -k "openTypeNameLicense" --file OFL.txt $ufo
            fi
        fi
    done

    /bin/rm -rf {source,tests}/{'',masters}/{backups,logs}

    exit 0
fi

if [ "$mode" == "version" ]
then
    version="$2"
    for ufo in source/*.ufo source/masters/*.ufo
    do
        if [ -d $ufo ]
        then
            psfsetversion $ufo "$version"
        fi
    done
    bumpversion --config-file $bv --allow-dirty --new-version "$version" major
    exit 0
fi

extra=$(echo ../$prj-private/tests)
if [ -d $extra -a "$mode" != "pdfs" ]
then
    export SMITH_EXTRATESTDIR=$extra
    echo "SMITH_EXTRATESTDIR is $SMITH_EXTRATESTDIR"
fi

# enable extra debugging most of the time
if [ "$mode" == "release" -o "$mode" == "zip" -o "$mode" == "tarball" ]
then
    echo -n
else
    export FONTTOOLS_LOOKUP_DEBUGGING=1
fi

# enable even more dubugging
if [ "$mode" == "debug" ]
then
    gdcsv-debug
    mode=build
fi
shift
$HOME/.local/bin/smith "$mode" "$@" $FLOWARGS
