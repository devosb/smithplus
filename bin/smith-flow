#!/bin/bash

export SILE_PATH=/mnt/builds/fontproof
if [ -f .smithrc ]
then
    source .smithrc
fi

if [ $HOSTNAME = fossa ]
then
    if [ -f wscript ]
    then
        prj=$(basename $PWD)
        rrun=../rrun-$prj
        if [ ! -x $rrun ]
        then
            echo "You are in $PWD which is not on the ramdisk, exiting..."
            exit 1
        fi
    fi
fi

if [ "$1" == "bisect" ]
then
    prj="$2"
    if [ -d "$prj" ]
    then
        pushd $prj
        smith distclean
        smith configure
        smith build
        if [ ! -f results/*-Regular.ttf ]
        then
            echo "broken build"
            exit 1
        fi
        echo "successful build"
        exit 0
        popd
    fi
fi

if [ "$1" == "make" ]
then
    if [ -d source/masters ]
    then
        for dspace in source/*Design.designspace
        do
            if [ -f $dspace ]
            then
                echo "building instance fonts from $dspace"
                fontmake -m $dspace --keep-overlaps -i -o otf ttf
                variable=$dspace
            fi
        done

        for dspace in source/*Variable.designspace
        do
            if [ -f $dspace ]
            then
                variable=$dspace
            fi
        done

        if [ -f $variable ]
        then
            echo "building variable font from $variable"
            fontmake -m $variable -o variable
        fi
    else
        for dspace in source/*.designspace
        do
            if [ -f $dspace ]
            then
                echo "building static fonts from $dspace"
                fontmake -m $dspace -o otf ttf
            fi
        done
    fi

    exit 0
fi

if [ "$1" == "install" ]
then
    cp -p -v results/*.ttf ~/guest
    cp -p -v results/*.ttf ~/.fonts
    for www in web woff
    do
        if [ -d results/$www ]
        then
            cp -p -v results/$www/*.woff* web
        fi
    done
    prj=$(basename $PWD)
    web=$HOME/guest/$prj-web
    rm -rf $web
    mkdir $web
    cp -a -v web/* $web

    exit 0
fi

if [ "$1" == "windows" ]
then
    pushd tests

    # windows apps
    /bin/cp -p -v *.indd *.docx ~/guest

    # plain text
    if [ -d generated ]
    then
        pushd generated
        for txt in *.txt
        do
            unix2dos -n $txt ~/guest/$txt
        done
        popd
    fi

    # ftml
    psfcheckftml
    for ftml in *.ftml
    do
        # check for valid files
        xmllint --noout --dtdvalid $HOME/builds/ftml/FTML.dtd $ftml
        if [ $? -gt 0 ]
        then
            echo "ftml file $ftml is invalid"
        fi

        # produce docuemnt
        base=$(basename $ftml .ftml)
        ftml2odt ${base}
        /bin/mv -v ${base}.odt ~/guest
    done
    popd

    # fonts
    /bin/cp -p -v results/*.ttf ~/guest

    exit 0
fi

if [ "$1" == "data" ]
then
    for auto in tools/auto-*
    do
        ./$auto tests/$(basename $auto .py).txt
    done

    pushd tests
    /bin/rm -rf generated
    mkdir generated
    for htxt in *.htxt
    do
        if [ -f $htxt ]
        then
            unikey -o generated/${htxt%.htxt}-plain.txt $htxt
        fi
    done

    for ftml in *.ftml
    do
        if [ -f $ftml ]
        then
            ftml2txt $ftml
        fi
    done

    pushd generated
    for txt in *.txt
    do
        for nf in nfc nfd
        do
            txtconv -i $txt -o ${txt%.txt}-$nf.txt -$nf -nobom
        done
    done
    popd
    popd

    exit 0
fi

if [ "$1" == "wordlists" ]
then
    cd tests
    if [ -f wiki.txt ]
    then
        mv wiki.txt wiki.text
        mv dict.txt dict.text
        echo "large wordlists disabled"
    else
        mv wiki.text wiki.txt
        mv dict.text dict.txt
        echo "large wordlists enabled"
    fi
    cd ..

    exit 0
fi

if [ "$1" == "update" ]
then
    gdcsv

    if [ -d documentation ]
    then
        pushd documentation
        for odt in *.odt
        do
            pdf=$(basename $odt .odt).pdf
            if [ $odt -nt $pdf ]
            then
                soffice --convert-to pdf $odt
            fi
        done
        popd
    fi

    for ufo in source/*.ufo source/masters/*.ufo
    do
        if [ -d $ufo ]
        then
            if [ OFL.txt -nt $ufo/fontinfo.plist ]
            then
                psfsetkeys -k "copyright" --filepart OFL.txt $ufo
                psfsetkeys -k "openTypeNameLicense" --file OFL.txt $ufo
            fi
        fi
    done

    /bin/rm -rf {source,tests}/{'',masters}/{backups,logs}

    exit 0
fi

$HOME/.local/bin/smith "$@" $FLOWARGS
