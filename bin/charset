#!/usr/bin/python3

import importlib.util
from fontTools.ttLib import TTFont
from palaso.unicode.ucd import UCD
import sys
import os
import argparse


def main():
    parser = argparse.ArgumentParser(description='Check character inventory of a TTF font')
    parser.add_argument('subset', help='(subset) Character set to check')
    parser.add_argument('full', help='(full) TTF font files to process', nargs='+')
    parser.add_argument('--version', action='version', version='%(prog)s ' + '0.1')
    args = parser.parse_args()


    subset = get_codepoints(args.subset)
    ucd = UCD()
    for item in args.full:
        print(f'{item}:')
        full = get_codepoints(item)
        print_differences(subset, full, ucd)


def get_codepoints(item):
    if item.endswith('.nam'):
        if os.path.exists(item):
            codepoints = get_namelist(item)
        else:
            print(f'name file {item} does not exist')
            sys.exit(1)
    if item.endswith('.ttf'):
        codepoints = get_cmap(item)
    else:
        codepoints = get_charset(item)

    return codepoints


def get_charset(charset_name):
    # file containing the charset
    home = os.environ["HOME"]
    charsets = 'builds/pyfontaine/fontaine/charsets/internals'
    charset_filename = os.path.join(home, charsets, charset_name + '.py')

    # load the charset file
    spec = importlib.util.spec_from_file_location('acharset', charset_filename)
    module = importlib.util.module_from_spec(spec)
    sys.modules['acharset'] = module
    spec.loader.exec_module(module)
    import acharset

    # return the list of characters in the charset
    return set(acharset.Charset.glyphs)


def get_namelist(namefile_filename):
    # file containing the name list
    codepoints = set()
    with open(namefile_filename) as namefile:
        for line in namefile:
            usv = line.split()[0]
            codepoint = int(usv, 16)
            codepoints.add(codepoint)

    # return the list of characters in the name file
    return codepoints


def get_cmap(font_filename):
    # load cmap from the font
    font = TTFont(font_filename)
    cmap = font.getBestCmap()

    # collect the codepoints in the font
    codepoints = set()
    for codepoint, glyph_name in cmap.items():
        codepoints.add(codepoint)

    return codepoints


def print_differences(subset, full, ucd):
    # output characters that are in the charset
    # but are missing from the font
    for char in sorted(subset - full):
        try:
            name = ucd.get(char, 'na')
        except KeyError:
            name = '(Unknown)'
        print(f'U+{char:04X} {name}')


if __name__ == "__main__":
    main()
